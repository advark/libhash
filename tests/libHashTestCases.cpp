/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * File:   CRC32_Test.cpp
 * Author: Yanick Poirier <ypoirier at hotmail.com>
 *
 * Created on 2019-11-01, 21:05:16
 */

#include <libhash/libhash.h>
#include <string.h>
#include "libHashTestCases.h"

using namespace libhash;

CPPUNIT_TEST_SUITE_REGISTRATION( libHashTestCases );

TestData libHashTestCases::testCases[] = {
    // Test #1
    {
        (char *) "", 0,
        // CRC-32
        { 0x00, 0x00, 0x00, 0x00 },
        // CRC-32C
        { 0x00, 0x00, 0x00, 0x00 },
        // MD5
        { 0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04,
            0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e },
        // SHA-1
        { 0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
            0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09 },
        // SHA2-224
        { 0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9,
            0x47, 0x61, 0x02, 0xbb, 0x28, 0x82, 0x34, 0xc4,
            0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a,
            0xc5, 0xb3, 0xe4, 0x2f },
        // SHA2-256
        { 0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
            0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
            0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
            0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55 },
        // SHA2-384
        { 0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38,
            0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
            0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
            0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
            0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
            0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b },
        // SHA2-512
        { 0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
            0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
            0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
            0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
            0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
            0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
            0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
            0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e }
    },

    // Test #2
    {
        (char*) "a", 1,
        // CRC-32
        { 0xe8, 0xb7, 0xbe, 0x43 },
        // CRC-32C
        { 0xc1, 0xd0, 0x43, 0x30 },
        // MD5
        { 0x0c, 0xc1, 0x75, 0xb9, 0xc0, 0xf1, 0xb6, 0xa8,
            0x31, 0xc3, 0x99, 0xe2, 0x69, 0x77, 0x26, 0x61 },
        // SHA-1
        { 0x86, 0xf7, 0xe4, 0x37, 0xfa, 0xa5, 0xa7, 0xfc, 0xe1, 0x5d,
            0x1d, 0xdc, 0xb9, 0xea, 0xea, 0xea, 0x37, 0x76, 0x67, 0xb8 },
        // SHA2-224
        { 0xab, 0xd3, 0x75, 0x34, 0xc7, 0xd9, 0xa2, 0xef,
            0xb9, 0x46, 0x5d, 0xe9, 0x31, 0xcd, 0x70, 0x55,
            0xff, 0xdb, 0x88, 0x79, 0x56, 0x3a, 0xe9, 0x80,
            0x78, 0xd6, 0xd6, 0xd5 },
        // SHA2-256
        { 0xca, 0x97, 0x81, 0x12, 0xca, 0x1b, 0xbd, 0xca,
            0xfa, 0xc2, 0x31, 0xb3, 0x9a, 0x23, 0xdc, 0x4d,
            0xa7, 0x86, 0xef, 0xf8, 0x14, 0x7c, 0x4e, 0x72,
            0xb9, 0x80, 0x77, 0x85, 0xaf, 0xee, 0x48, 0xbb },
        // SHA2-384
        {  0x54, 0xa5, 0x9b, 0x9f, 0x22, 0xb0, 0xb8, 0x08,
            0x80, 0xd8, 0x42, 0x7e, 0x54, 0x8b, 0x7c, 0x23,
            0xab, 0xd8, 0x73, 0x48, 0x6e, 0x1f, 0x03, 0x5d,
            0xce, 0x9c, 0xd6, 0x97, 0xe8, 0x51, 0x75, 0x03,
            0x3c, 0xaa, 0x88, 0xe6, 0xd5, 0x7b, 0xc3, 0x5e,
            0xfa, 0xe0, 0xb5, 0xaf, 0xd3, 0x14, 0x5f, 0x31 },
        // SHA2-512
        { 0x1f, 0x40, 0xfc, 0x92, 0xda, 0x24, 0x16, 0x94,
            0x75, 0x09, 0x79, 0xee, 0x6c, 0xf5, 0x82, 0xf2,
            0xd5, 0xd7, 0xd2, 0x8e, 0x18, 0x33, 0x5d, 0xe0,
            0x5a, 0xbc, 0x54, 0xd0, 0x56, 0x0e, 0x0f, 0x53,
            0x02, 0x86, 0x0c, 0x65, 0x2b, 0xf0, 0x8d, 0x56,
            0x02, 0x52, 0xaa, 0x5e, 0x74, 0x21, 0x05, 0x46,
            0xf3, 0x69, 0xfb, 0xbb, 0xce, 0x8c, 0x12, 0xcf,
            0xc7, 0x95, 0x7b, 0x26, 0x52, 0xfe, 0x9a, 0x75 }
    },

    // Test #3
    {
        (char*) "abc", 3,
        // CRC-32
        { 0x35, 0x24, 0x41, 0xc2 },
        // CRC-32C
        { 0x36, 0x4b, 0x3f, 0xb7 },
        // MD5
        { 0x90, 0x01, 0x50, 0x98, 0x3c, 0xd2, 0x4f, 0xb0,
            0xd6, 0x96, 0x3f, 0x7d, 0x28, 0xe1, 0x7f, 0x72 },
        // SHA-1
        { 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e,
            0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d },
        // SHA2-224
        { 0x23, 0x09, 0x7d, 0x22, 0x34, 0x05, 0xd8, 0x22,
            0x86, 0x42, 0xa4, 0x77, 0xbd, 0xa2, 0x55, 0xb3,
            0x2a, 0xad, 0xbc, 0xe4, 0xbd, 0xa0, 0xb3, 0xf7,
            0xe3, 0x6c, 0x9d, 0xa7 },
        // SHA2-256
        { 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
            0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
            0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
            0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad },
        // SHA2-384
        { 0xcb, 0x00, 0x75, 0x3f, 0x45, 0xa3, 0x5e, 0x8b,
            0xb5, 0xa0, 0x3d, 0x69, 0x9a, 0xc6, 0x50, 0x07,
            0x27, 0x2c, 0x32, 0xab, 0x0e, 0xde, 0xd1, 0x63,
            0x1a, 0x8b, 0x60, 0x5a, 0x43, 0xff, 0x5b, 0xed,
            0x80, 0x86, 0x07, 0x2b, 0xa1, 0xe7, 0xcc, 0x23,
            0x58, 0xba, 0xec, 0xa1, 0x34, 0xc8, 0x25, 0xa7 },
        // SHA2-512
        { 0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba,
            0xcc, 0x41, 0x73, 0x49, 0xae, 0x20, 0x41, 0x31,
            0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2,
            0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a,
            0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8,
            0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd,
            0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e,
            0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f }
    },

    // Test #4
    {
        (char*) "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq", 56,
        // CRC-32
        { 0x17, 0x1a, 0x3f, 0x5f },
        // CRC-32C
        { 0x07, 0x13, 0x25, 0xf5 },
        // MD5
        { 0x82, 0x15, 0xef, 0x07, 0x96, 0xa2, 0x0b, 0xca,
            0xaa, 0xe1, 0x16, 0xd3, 0x87, 0x6c, 0x66, 0x4a },
        // SHA-1
        { 0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,
            0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1 },
        // SHA2-224
        { 0x75, 0x38, 0x8b, 0x16, 0x51, 0x27, 0x76, 0xcc,
            0x5d, 0xba, 0x5d, 0xa1, 0xfd, 0x89, 0x01, 0x50,
            0xb0, 0xc6, 0x45, 0x5c, 0xb4, 0xf5, 0x8b, 0x19,
            0x52, 0x52, 0x25, 0x25 },
        // SHA2-256
        { 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
            0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
            0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
            0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1 },
        // SHA2-384
        { 0x33, 0x91, 0xfd, 0xdd, 0xfc, 0x8d, 0xc7, 0x39,
            0x37, 0x07, 0xa6, 0x5b, 0x1b, 0x47, 0x09, 0x39,
            0x7c, 0xf8, 0xb1, 0xd1, 0x62, 0xaf, 0x05, 0xab,
            0xfe, 0x8f, 0x45, 0x0d, 0xe5, 0xf3, 0x6b, 0xc6,
            0xb0, 0x45, 0x5a, 0x85, 0x20, 0xbc, 0x4e, 0x6f,
            0x5f, 0xe9, 0x5b, 0x1f, 0xe3, 0xc8, 0x45, 0x2b },
        // SHA2-512
        { 0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a,
            0x0c, 0xed, 0x7b, 0xeb, 0x8e, 0x08, 0xa4, 0x16,
            0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2, 0x28, 0xa8,
            0x27, 0x9b, 0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35,
            0x96, 0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07, 0xf9,
            0xaa, 0x1d, 0x3b, 0xea, 0x57, 0x78, 0x9c, 0xa0,
            0x31, 0xad, 0x85, 0xc7, 0xa7, 0x1d, 0xd7, 0x03,
            0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45 }
    },

    // Test #5
    {
        (char*) "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu", 112,
        // CRC-32
        { 0x19, 0x1f, 0x33, 0x49 },
        // CRC-32C
        { 0x3f, 0x60, 0xa4, 0xb9 },
        // MD5
        { 0x03, 0xdd, 0x88, 0x07, 0xa9, 0x31, 0x75, 0xfb,
            0x06, 0x2d, 0xfb, 0x55, 0xdc, 0x7d, 0x35, 0x9c },
        // SHA-1
        { 0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,
            0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59 },
        // SHA2-224
        { 0xc9, 0x7c, 0xa9, 0xa5, 0x59, 0x85, 0x0c, 0xe9,
            0x7a, 0x04, 0xa9, 0x6d, 0xef, 0x6d, 0x99, 0xa9,
            0xe0, 0xe0, 0xe2, 0xab, 0x14, 0xe6, 0xb8, 0xdf,
            0x26, 0x5f, 0xc0, 0xb3 },
        // SHA2-256
        { 0xcf, 0x5b, 0x16, 0xa7, 0x78, 0xaf, 0x83, 0x80,
            0x03, 0x6c, 0xe5, 0x9e, 0x7b, 0x04, 0x92, 0x37,
            0x0b, 0x24, 0x9b, 0x11, 0xe8, 0xf0, 0x7a, 0x51,
            0xaf, 0xac, 0x45, 0x03, 0x7a, 0xfe, 0xe9, 0xd1 },
        // SHA2-384
        { 0x09, 0x33, 0x0c, 0x33, 0xf7, 0x11, 0x47, 0xe8,
            0x3d, 0x19, 0x2f, 0xc7, 0x82, 0xcd, 0x1b, 0x47,
            0x53, 0x11, 0x1b, 0x17, 0x3b, 0x3b, 0x05, 0xd2,
            0x2f, 0xa0, 0x80, 0x86, 0xe3, 0xb0, 0xf7, 0x12,
            0xfc, 0xc7, 0xc7, 0x1a, 0x55, 0x7e, 0x2d, 0xb9,
            0x66, 0xc3, 0xe9, 0xfa, 0x91, 0x74, 0x60, 0x39 },
        // SHA2-512
        { 0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda,
            0x8c, 0xf4, 0xf7, 0x28, 0x14, 0xfc, 0x14, 0x3f,
            0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f, 0x7f, 0xa1,
            0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18,
            0x50, 0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4,
            0x33, 0x1b, 0x99, 0xde, 0xc4, 0xb5, 0x43, 0x3a,
            0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26, 0x54,
            0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09 }
    },

    // Test #6
    {
        (char*) "abcdefghijklmnopqrstuvwxyz", 26,
        // CRC-32
        { 0x4c, 0x27, 0x50, 0xbd },
        // CRC-32C
        { 0x9e, 0xe6, 0xef, 0x25 },
        // MD5
        { 0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00,
            0x7d, 0xfb, 0x49, 0x6c, 0xca, 0x67, 0xe1, 0x3b },
        // SHA-1
        { 0x32, 0xd1, 0x0c, 0x7b, 0x8c, 0xf9, 0x65, 0x70, 0xca, 0x04,
            0xce, 0x37, 0xf2, 0xa1, 0x9d, 0x84, 0x24, 0x0d, 0x3a, 0x89 },
        // SHA2-224
        { 0x45, 0xa5, 0xf7, 0x2c, 0x39, 0xc5, 0xcf, 0xf2,
            0x52, 0x2e, 0xb3, 0x42, 0x97, 0x99, 0xe4, 0x9e,
            0x5f, 0x44, 0xb3, 0x56, 0xef, 0x92, 0x6b, 0xcf,
            0x39, 0x0d, 0xcc, 0xc2 },
        // SHA2-256
        { 0x71, 0xc4, 0x80, 0xdf, 0x93, 0xd6, 0xae, 0x2f,
            0x1e, 0xfa, 0xd1, 0x44, 0x7c, 0x66, 0xc9, 0x52,
            0x5e, 0x31, 0x62, 0x18, 0xcf, 0x51, 0xfc, 0x8d,
            0x9e, 0xd8, 0x32, 0xf2, 0xda, 0xf1, 0x8b, 0x73 },
        // SHA2-384
        { 0xfe, 0xb6, 0x73, 0x49, 0xdf, 0x3d, 0xb6, 0xf5,
            0x92, 0x48, 0x15, 0xd6, 0xc3, 0xdc, 0x13, 0x3f,
            0x09, 0x18, 0x09, 0x21, 0x37, 0x31, 0xfe, 0x5c,
            0x7b, 0x5f, 0x49, 0x99, 0xe4, 0x63, 0x47, 0x9f,
            0xf2, 0x87, 0x7f, 0x5f, 0x29, 0x36, 0xfa, 0x63,
            0xbb, 0x43, 0x78, 0x4b, 0x12, 0xf3, 0xeb, 0xb4 },
        // SHA2-512
        { 0x4d, 0xbf, 0xf8, 0x6c, 0xc2, 0xca, 0x1b, 0xae,
            0x1e, 0x16, 0x46, 0x8a, 0x05, 0xcb, 0x98, 0x81,
            0xc9, 0x7f, 0x17, 0x53, 0xbc, 0xe3, 0x61, 0x90,
            0x34, 0x89, 0x8f, 0xaa, 0x1a, 0xab, 0xe4, 0x29,
            0x95, 0x5a, 0x1b, 0xf8, 0xec, 0x48, 0x3d, 0x74,
            0x21, 0xfe, 0x3c, 0x16, 0x46, 0x61, 0x3a, 0x59,
            0xed, 0x54, 0x41, 0xfb, 0x0f, 0x32, 0x13, 0x89,
            0xf7, 0x7f, 0x48, 0xa8, 0x79, 0xc7, 0xb1, 0xf1 }
    },

    // Test #7
    {
        (char*) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", 62,
        // CRC-32
        { 0x1f, 0xc2, 0xe6, 0xd2 },
        // CRC-32C
        { 0xa2, 0x45, 0xd5, 0x7d },
        // MD5
        { 0xd1, 0x74, 0xab, 0x98, 0xd2, 0x77, 0xd9, 0xf5,
            0xa5, 0x61, 0x1c, 0x2c, 0x9f, 0x41, 0x9d, 0x9f },
        // SHA-1
        { 0x76, 0x1c, 0x45, 0x7b, 0xf7, 0x3b, 0x14, 0xd2, 0x7e, 0x9e,
            0x92, 0x65, 0xc4, 0x6f, 0x4b, 0x4d, 0xda, 0x11, 0xf9, 0x40 },
        // SHA2-224
        { 0xbf, 0xf7, 0x2b, 0x4f, 0xcb, 0x7d, 0x75, 0xe5,
            0x63, 0x29, 0x00, 0xac, 0x5f, 0x90, 0xd2, 0x19,
            0xe0, 0x5e, 0x97, 0xa7, 0xbd, 0xe7, 0x2e, 0x74,
            0x0d, 0xb3, 0x93, 0xd9 },
        // SHA2-256
        { 0xdb, 0x4b, 0xfc, 0xbd, 0x4d, 0xa0, 0xcd, 0x85,
            0xa6, 0x0c, 0x3c, 0x37, 0xd3, 0xfb, 0xd8, 0x80,
            0x5c, 0x77, 0xf1, 0x5f, 0xc6, 0xb1, 0xfd, 0xfe,
            0x61, 0x4e, 0xe0, 0xa7, 0xc8, 0xfd, 0xb4, 0xc0 },
        // SHA2-384
        { 0x17, 0x61, 0x33, 0x6e, 0x3f, 0x7c, 0xbf, 0xe5,
            0x1d, 0xeb, 0x13, 0x7f, 0x02, 0x6f, 0x89, 0xe0,
            0x1a, 0x44, 0x8e, 0x3b, 0x1f, 0xaf, 0xa6, 0x40,
            0x39, 0xc1, 0x46, 0x4e, 0xe8, 0x73, 0x2f, 0x11,
            0xa5, 0x34, 0x1a, 0x6f, 0x41, 0xe0, 0xc2, 0x02,
            0x29, 0x47, 0x36, 0xed, 0x64, 0xdb, 0x1a, 0x84 },
        // SHA2-512
        { 0x1e, 0x07, 0xbe, 0x23, 0xc2, 0x6a, 0x86, 0xea,
            0x37, 0xea, 0x81, 0x0c, 0x8e, 0xc7, 0x80, 0x93,
            0x52, 0x51, 0x5a, 0x97, 0x0e, 0x92, 0x53, 0xc2,
            0x6f, 0x53, 0x6c, 0xfc, 0x7a, 0x99, 0x96, 0xc4,
            0x5c, 0x83, 0x70, 0x58, 0x3e, 0x0a, 0x78, 0xfa,
            0x4a, 0x90, 0x04, 0x1d, 0x71, 0xa4, 0xce, 0xab,
            0x74, 0x23, 0xf1, 0x9c, 0x71, 0xb9, 0xd5, 0xa3,
            0xe0, 0x12, 0x49, 0xf0, 0xbe, 0xbd, 0x58, 0x94 }
    },

    // Test #8
    {
        (char*) "12345678901234567890123456789012345678901234567890123456789012345678901234567890", 80,
        // CRC-32
        { 0x7c, 0xa9, 0x4a, 0x72 },
        // CRC-32C
        { 0x47, 0x7a, 0x67, 0x81 },
        // MD5
        { 0x57, 0xed, 0xf4, 0xa2, 0x2b, 0xe3, 0xc9, 0x55,
            0xac, 0x49, 0xda, 0x2e, 0x21, 0x07, 0xb6, 0x7a },
        // SHA-1
        { 0x50, 0xab, 0xf5, 0x70, 0x6a, 0x15, 0x09, 0x90, 0xa0, 0x8b,
            0x2c, 0x5e, 0xa4, 0x0f, 0xa0, 0xe5,  0x85, 0x55, 0x47, 0x32 },
        // SHA2-224
        { 0xb5, 0x0a, 0xec, 0xbe, 0x4e, 0x9b, 0xb0, 0xb5,
            0x7b, 0xc5, 0xf3, 0xae, 0x76, 0x0a, 0x8e, 0x01,
            0xdb, 0x24, 0xf2, 0x03, 0xfb, 0x3c, 0xdc, 0xd1,
            0x31, 0x48, 0x04, 0x6e },
        // SHA2-256
        { 0xf3, 0x71, 0xbc, 0x4a, 0x31, 0x1f, 0x2b, 0x00,
            0x9e, 0xef, 0x95, 0x2d, 0xd8, 0x3c, 0xa8, 0x0e,
            0x2b, 0x60, 0x02, 0x6c, 0x8e, 0x93, 0x55, 0x92,
            0xd0, 0xf9, 0xc3, 0x08, 0x45, 0x3c, 0x81, 0x3e },
        // SHA2-384
        { 0xb1, 0x29, 0x32, 0xb0, 0x62, 0x7d, 0x1c, 0x06,
            0x09, 0x42, 0xf5, 0x44, 0x77, 0x64, 0x15, 0x56,
            0x55, 0xbd, 0x4d, 0xa0, 0xc9, 0xaf, 0xa6, 0xdd,
            0x9b, 0x9e, 0xf5, 0x31, 0x29, 0xaf, 0x1b, 0x8f,
            0xb0, 0x19, 0x59, 0x96, 0xd2, 0xde, 0x9c, 0xa0,
            0xdf, 0x9d, 0x82, 0x1f, 0xfe, 0xe6, 0x70, 0x26 },
        // SHA2-512
        {0x72, 0xec, 0x1e, 0xf1, 0x12, 0x4a, 0x45, 0xb0,
            0x47, 0xe8, 0xb7, 0xc7, 0x5a, 0x93, 0x21, 0x95,
            0x13, 0x5b, 0xb6, 0x1d, 0xe2, 0x4e, 0xc0, 0xd1,
            0x91, 0x40, 0x42, 0x24, 0x6e, 0x0a, 0xec, 0x3a,
            0x23, 0x54, 0xe0, 0x93, 0xd7, 0x6f, 0x30, 0x48,
            0xb4, 0x56, 0x76, 0x43, 0x46, 0x90, 0x0c, 0xb1,
            0x30, 0xd2, 0xa4, 0xfd, 0x5d, 0xd1, 0x6a, 0xbb,
            0x5e, 0x30, 0xbc, 0xb8, 0x50, 0xde, 0xe8, 0x43 }
    },

    // Test #9
    {
        NULL, 1000000,
        // CRC-32
        { 0xdc, 0x25, 0xbf, 0xbc },
        // CRC-32C
        { 0x43, 0x6f, 0xe2, 0x40 },
        // MD5
        { 0x77, 0x07, 0xd6, 0xae, 0x4e, 0x02, 0x7c, 0x70,
            0xee, 0xa2, 0xa9, 0x35, 0xc2, 0x29, 0x6f, 0x21 },
        // SHA-1
        { 0x34, 0xaa, 0x97, 0x3c, 0xd4, 0xc4, 0xda, 0xa4, 0xf6, 0x1e,
            0xeb, 0x2b, 0xdb, 0xad, 0x27, 0x31, 0x65, 0x34, 0x01, 0x6f },
        // SHA2-224
        { 0x20, 0x79, 0x46, 0x55, 0x98, 0x0c, 0x91, 0xd8,
            0xbb, 0xb4, 0xc1, 0xea, 0x97, 0x61, 0x8a, 0x4b,
            0xf0, 0x3f, 0x42, 0x58, 0x19, 0x48, 0xb2, 0xee,
            0x4e, 0xe7, 0xad, 0x67 },
        // SHA2-256
        { 0xcd, 0xc7, 0x6e, 0x5c, 0x99, 0x14, 0xfb, 0x92,
            0x81, 0xa1, 0xc7, 0xe2, 0x84, 0xd7, 0x3e, 0x67,
            0xf1, 0x80, 0x9a, 0x48, 0xa4, 0x97, 0x20, 0x0e,
            0x04, 0x6d, 0x39, 0xcc, 0xc7, 0x11, 0x2c, 0xd0 },
        // SHA2-384
        { 0x9d, 0x0e, 0x18, 0x09, 0x71, 0x64, 0x74, 0xcb,
            0x08, 0x6e, 0x83, 0x4e, 0x31, 0x0a, 0x4a, 0x1c,
            0xed, 0x14, 0x9e, 0x9c, 0x00, 0xf2, 0x48, 0x52,
            0x79, 0x72, 0xce, 0xc5, 0x70, 0x4c, 0x2a, 0x5b,
            0x07, 0xb8, 0xb3, 0xdc, 0x38, 0xec, 0xc4, 0xeb,
            0xae, 0x97, 0xdd, 0xd8, 0x7f, 0x3d, 0x89, 0x85 },
        // SHA2-512
        { 0xe7, 0x18, 0x48, 0x3d, 0x0c, 0xe7, 0x69, 0x64,
            0x4e, 0x2e, 0x42, 0xc7, 0xbc, 0x15, 0xb4, 0x63,
            0x8e, 0x1f, 0x98, 0xb1, 0x3b, 0x20, 0x44, 0x28,
            0x56, 0x32, 0xa8, 0x03, 0xaf, 0xa9, 0x73, 0xeb,
            0xde, 0x0f, 0xf2, 0x44, 0x87, 0x7e, 0xa6, 0x0a,
            0x4c, 0xb0, 0x43, 0x2c, 0xe5, 0x77, 0xc3, 0x1b,
            0xeb, 0x00, 0x9c, 0x5c, 0x2c, 0x49, 0xaa, 0x2e,
            0x4e, 0xad, 0xb2, 0x17, 0xad, 0x8c, 0xc0, 0x9b }
    },

    // Test #10
    {
        NULL, 1024,
        // CRC-32
        { 0x93, 0x74, 0x90, 0x63 },
        // CRC-32C
        { 0xb7, 0x7a, 0x35, 0x8a },
        // MD5
        { 0x3d, 0x64, 0xa4, 0x18, 0xc6, 0xe1, 0x6c, 0xbd,
            0xa4, 0x33, 0x69, 0x85, 0x18, 0x30, 0x57, 0xb2 },
        // SHA-1
        { 0x72, 0xfb, 0x82, 0x0d, 0x14, 0x76, 0x8a, 0x53, 0xc8, 0x37,
            0xa1, 0xeb, 0xde, 0xcb, 0x43, 0x48, 0x91, 0xb4, 0x52, 0xc4 },
        // SHA2-224
        { 0x87, 0x4b, 0xa4, 0x71, 0x24, 0x29, 0x6d, 0xf7,
            0x68, 0xba, 0x5f, 0x61, 0xfc, 0xd7, 0xc6, 0x5e,
            0x16, 0xe7, 0x0c, 0x1e, 0x09, 0x28, 0xdb, 0x45,
            0xaa, 0x2e, 0xa5, 0x86 },
        // SHA2-256
        { 0x29, 0xeb, 0x95, 0xa1, 0x76, 0xec, 0xca, 0x47,
            0xf1, 0x91, 0x08, 0x41, 0x34, 0xce, 0x8c, 0x0c,
            0xf3, 0x9c, 0x89, 0x6e, 0xa6, 0xcb, 0x8b, 0xc1,
            0x2d, 0xbf, 0x3d, 0x82, 0x62, 0x07, 0xe6, 0x97 },
        // SHA2-384
        {  0xb7, 0x7f, 0x4a, 0xef, 0x6f, 0x06, 0x7c, 0x46,
            0xb6, 0x15, 0x1b, 0x12, 0x19, 0xca, 0x9a, 0x81,
            0x7e, 0x9c, 0x3e, 0x6e, 0x41, 0xf9, 0xb6, 0x6b,
            0xbe, 0x86, 0xf8, 0x6c, 0x4b, 0xad, 0x5a, 0x4d,
            0xfc, 0x6a, 0x35, 0x7e, 0x09, 0xcc, 0x5c, 0x32,
            0x4f, 0xf7, 0xd7, 0x2a, 0xb9, 0x4c, 0x30, 0x9a },
        // SHA2-512
        { 0x52, 0x29, 0xb1, 0xc9, 0xe4, 0x34, 0x99, 0x50,
            0x39, 0x2a, 0x06, 0x6d, 0x72, 0x7f, 0xc4, 0x8a,
            0x4b, 0xca, 0x08, 0xad, 0xf2, 0x64, 0x0d, 0xe8,
            0x64, 0xa0, 0x90, 0xac, 0x50, 0x62, 0x72, 0x10,
            0xec, 0x4b, 0xec, 0x4a, 0x31, 0xa1, 0x88, 0x8d,
            0xe8, 0x07, 0xae, 0x83, 0xc1, 0x23, 0xf9, 0x13,
            0x16, 0x3b, 0x19, 0x9b, 0x72, 0x83, 0xc2, 0x9b,
            0x07, 0xae, 0x17, 0xe5, 0xcb, 0xf2, 0xd6, 0xdc }
    }
};

libHashTestCases::libHashTestCases( ) { }

libHashTestCases::~libHashTestCases( ) { }

void libHashTestCases::setUp( ) {
    int i;
    char c = 0;

    // Fill test buffer with 1000000 'a's
    i = ( sizeof ( testCases ) / sizeof (struct TestData ) ) - 2;
    testCases[ i ].data = (char *) malloc( 1000000 );
    memset( testCases[ i ].data, 'a', 1000000 );

    // Fill test buffer with 1024 digits from 0 to 9.
    i = ( sizeof ( testCases ) / sizeof (struct TestData ) ) - 1;
    testCases[ i ].data = (char *) malloc( 1024 );
    for( int j = 0; j < testCases[ i ].size - 1; j++ ) {
        testCases[ i ].data[j] = c + 0x30;
        c = c == 9 ? 0 : c + 1;
    }
}

void libHashTestCases::tearDown( ) {
    int i;

    i = ( sizeof ( testCases ) / sizeof (struct TestData ) ) - 2;
    free( testCases[ i ].data );

    i = ( sizeof ( testCases ) / sizeof (struct TestData ) ) - 1;
    free( testCases[ i ].data );
}

