// ////////////////////////////////////////////////////////////////////////////
// System:     libHash
// File:       hashbase.cpp
//
// Author:     Yanick Poirier       ypoirier@hotmail.com
// Date:       2017-01-21
//
// Description
// HashingBase class implementation
//
// Copyright (c) 2017, Yanick Poirier. All rights reserved.
// ////////////////////////////////////////////////////////////////////////////

// ============================================================================
// HEADER FILES
// ============================================================================

#include <stdlib.h>
#include "../include/libhash/defs.h"
#include "../include/libhash/hashbase.h"

using namespace libhash;

// ============================================================================
// CONSTANTS & MACROS
// ============================================================================

// ============================================================================
// STRUCTURES & TYPEDEFS
// ============================================================================

// ============================================================================
// CLASSES
// ============================================================================

// ============================================================================
// PROTOTYPES
// ============================================================================

// ============================================================================
// IMPLEMENTATION
// ============================================================================

// -------------------------------------------------------------------------
HashingBase::HashingBase( size_t size ) {
    mBits = size;
    mHash = (uint8_t *)::malloc( size / 8 );
}

// -------------------------------------------------------------------------
HashingBase::~HashingBase() {
    if( mHash != NULL ) {
        ::free( mHash );
    }
}

// -------------------------------------------------------------------------
int HashingBase::getValue( uint8_t *buffer, size_t size ) {
    size_t hashBytes = getHashSize() / 8;
    size_t max = size < hashBytes ? size : hashBytes;

    for( size_t i = 0; i < max; i++ ) {
        buffer[ i ] = mHash[ i ];
    }

    return max;
}

// EOF: hashbase.cpp


